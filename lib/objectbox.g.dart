// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_sync_flutter_libs/objectbox_sync_flutter_libs.dart';

import 'user_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1395150559549795139),
      name: 'UserEntity',
      lastPropertyId: const IdUid(10, 1867140621163948212),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 167907712512551131),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6956017675917000186),
            name: 'userId',
            type: 9,
            flags: 2048,
            indexId: const IdUid(1, 6042224331714066424)),
        ModelProperty(
            id: const IdUid(3, 7180830786503523802),
            name: 'userName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2379499049281233940),
            name: 'userImageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 612396321888567877),
            name: 'deptName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 422280850478490927),
            name: 'tenantName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6633184375618348164),
            name: 'userEmail',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1284898135949785048),
            name: 'userIntel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3438652478491178749),
            name: 'userMtel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1867140621163948212),
            name: 'expired',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 1395150559549795139),
      lastIndexId: const IdUid(1, 6042224331714066424),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    UserEntity: EntityDefinition<UserEntity>(
        model: _entities[0],
        toOneRelations: (UserEntity object) => [],
        toManyRelations: (UserEntity object) => {},
        getId: (UserEntity object) => object.id,
        setId: (UserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (UserEntity object, fb.Builder fbb) {
          final userIdOffset = fbb.writeString(object.userId);
          final userNameOffset = fbb.writeString(object.userName);
          final userImageUrlOffset = object.userImageUrl == null
              ? null
              : fbb.writeString(object.userImageUrl!);
          final deptNameOffset = fbb.writeString(object.deptName);
          final tenantNameOffset = fbb.writeString(object.tenantName);
          final userEmailOffset = object.userEmail == null
              ? null
              : fbb.writeString(object.userEmail!);
          final userIntelOffset = object.userIntel == null
              ? null
              : fbb.writeString(object.userIntel!);
          final userMtelOffset = object.userMtel == null
              ? null
              : fbb.writeString(object.userMtel!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addOffset(2, userNameOffset);
          fbb.addOffset(3, userImageUrlOffset);
          fbb.addOffset(4, deptNameOffset);
          fbb.addOffset(5, tenantNameOffset);
          fbb.addOffset(6, userEmailOffset);
          fbb.addOffset(7, userIntelOffset);
          fbb.addOffset(8, userMtelOffset);
          fbb.addBool(9, object.expired);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final userIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final userNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final userImageUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final deptNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final tenantNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final userEmailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final userIntelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 18);
          final userMtelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final expiredParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);
          final object = UserEntity(
              userId: userIdParam,
              userName: userNameParam,
              userImageUrl: userImageUrlParam,
              deptName: deptNameParam,
              tenantName: tenantNameParam,
              userEmail: userEmailParam,
              userIntel: userIntelParam,
              userMtel: userMtelParam,
              expired: expiredParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [UserEntity] entity fields to define ObjectBox queries.
class UserEntity_ {
  /// see [UserEntity.id]
  static final id =
      QueryIntegerProperty<UserEntity>(_entities[0].properties[0]);

  /// see [UserEntity.userId]
  static final userId =
      QueryStringProperty<UserEntity>(_entities[0].properties[1]);

  /// see [UserEntity.userName]
  static final userName =
      QueryStringProperty<UserEntity>(_entities[0].properties[2]);

  /// see [UserEntity.userImageUrl]
  static final userImageUrl =
      QueryStringProperty<UserEntity>(_entities[0].properties[3]);

  /// see [UserEntity.deptName]
  static final deptName =
      QueryStringProperty<UserEntity>(_entities[0].properties[4]);

  /// see [UserEntity.tenantName]
  static final tenantName =
      QueryStringProperty<UserEntity>(_entities[0].properties[5]);

  /// see [UserEntity.userEmail]
  static final userEmail =
      QueryStringProperty<UserEntity>(_entities[0].properties[6]);

  /// see [UserEntity.userIntel]
  static final userIntel =
      QueryStringProperty<UserEntity>(_entities[0].properties[7]);

  /// see [UserEntity.userMtel]
  static final userMtel =
      QueryStringProperty<UserEntity>(_entities[0].properties[8]);

  /// see [UserEntity.expired]
  static final expired =
      QueryBooleanProperty<UserEntity>(_entities[0].properties[9]);
}
